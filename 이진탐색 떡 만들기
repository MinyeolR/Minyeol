# def binary_search(array,target,start,end):
    while start <= end:
        mid = (start+end)//2
    
        if array[mid] == target:
            return mid
        
        elif array[mid] > target:
            end = mid - 1
        
        else :
            start = mid + 1
        
    return None

n,m = map(int,input().split())
big_list = list(map(int,input().split()))

array = [i for i in range(min(big_list),max(big_list)+1)]

def make_M_list(array,start,end):
    i = 1
    M_list = []
    while start <= end:
        mid = (start + end) // 2

        click_list = [] #남은떡의 합 계산
        for i in big_list:
            k = i - array[mid]
            if k > 0:
                click_list.append(k)
    
        M_list.append(sum(click_list))#이진탐색을 활용한 M 들의 계산
        if M_list[len(M_list)-1] == m:
            return array[mid]
        
        elif M_list[len(M_list)-1] > m:
            start = mid + 1
        else:
            
    
    return M_list

print(make_M_list(array,0,len(array)-1))



        
